// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WalBuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimeLog struct {
	_tab flatbuffers.Table
}

func GetRootAsTimeLog(buf []byte, offset flatbuffers.UOffsetT) *TimeLog {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimeLog{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TimeLog) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimeLog) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimeLog) TimeId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimeLog) MutateTimeId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *TimeLog) X() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 99999999
}

func (rcv *TimeLog) MutateX(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *TimeLog) Y() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 99999999
}

func (rcv *TimeLog) MutateY(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *TimeLog) Angle() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 99999999.0
}

func (rcv *TimeLog) MutateAngle(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func TimeLogStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TimeLogAddTimeId(builder *flatbuffers.Builder, timeId uint64) {
	builder.PrependUint64Slot(0, timeId, 0)
}
func TimeLogAddX(builder *flatbuffers.Builder, x int32) {
	builder.PrependInt32Slot(1, x, 99999999)
}
func TimeLogAddY(builder *flatbuffers.Builder, y int32) {
	builder.PrependInt32Slot(2, y, 99999999)
}
func TimeLogAddAngle(builder *flatbuffers.Builder, angle float32) {
	builder.PrependFloat32Slot(3, angle, 99999999.0)
}
func TimeLogEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
